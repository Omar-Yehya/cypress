Locators
Element used for locating elements 
Any selection that has interaction is an input(recieves elements)

1: Xpath locator- HTML based, not a native browser language (browser translates it to find elements).

/button /* finds all <button> elements */
//*[@id="submit-btn"] /* finds element with id="submit-btn" */
//div[@class="login-form"]/input /* finds <input> inside a <div> with class="login-form" */
//div[contains(@class, "alert") and contains(@class, "error")] /* finds <div> with both "alert" and "error" classes */


2: CSS locator- 
button /* finds all <button> elements */
#submit-btn         /* finds element with id="submit-btn" */
.login-form input   /* finds all <input> inside any element with class="login-form" */
div.alert.error     /* finds <div> with class="alert" AND "error" */

class and ID are most common to use 
space in class name are different class names  (Choose one) or use multiple 
EXAMPLE: <button class="button is-white Footer_button__2oD+V">Mock Interviews</button>flex
button.is-white.button


CSS child access (do this when there is nothing unique to grab from so go to parrent and then access child via parrent)
 
PARENT                      <div id="checkbox-button-group" data-identifier="Checkboxes"></div>
CHILD DIV                   <div>
CHILD THAT I WANT TO GET    <label id="apple_check" class="checkbox">…</label>

#checkbox-button-group > div > #apple_check

>   ===       direct child 
*   ===       everyting under 
,   ===       allows you to jump from completly differnt classes so one parent to a completly differnt child in another class 
' ' ===       a space will skip to all children under so  #main-content h2 grabs all h2 under id 

square brackets [] are used to select elements by attribute in CSS we do this when ID's or classes are DYNAMIC
its just regX:
// ✅ Exact match
cy.get('[type="submit"]') 

// ✅ Contains (anywhere in value)
cy.get('[href*="login"]') 

// ✅ Starts with
cy.get('[id^="box_"]') 

// ✅ Ends with
cy.get('[src$=".jpg"]') 

// ✅ Attribute exists
cy.get('[disabled]') 

// ✅ Exact match with single quotes
cy.get("[name='email']") 

// ✅ Multiple attributes
cy.get('[type="checkbox"][checked]') 

// ✅ Best practice: custom data attributes for testing
cy.get('[data-cy="login-btn"]') 
---------------------------------------------------------------------------
Pseudo Class
// :first-child – first element in a parent
cy.get('li:first-child')

// :last-child – last element in a parent
cy.get('li:last-child')

// :nth-child(n) – nth element in a parent (1-based)
cy.get('tr:nth-child(2)')

// :hover – CSS only (can't use in Cypress selector, but affects styling)

// :checked – checked checkboxes/radio buttons
cy.get('input:checked')

// :disabled – disabled inputs/buttons
cy.get('button:disabled')

// :focus – currently focused input
cy.get('input:focus')

// :not() – exclude certain elements
cy.get('button:not([disabled])')


_________________________________4/30/2025______________________________________________________________________

.eq             === target based on index

.contains       === Visual text that is seen on web page  the best way to use contains use a element first        cy.contains('.card', 'HTML Elements') 

.find('div')    Here you start with get at a parent and then find what you are looking for 

.next()         Gets next element cy.get('div').contains('Paragraph').next()
nextAll()       Gets all the next elements

.prev           gets previous elemen
.prevAll        gets all previous elemen

.parent()       gets first paraent element  
.parents()      goes all the way up to OG parent 
parentsUntil() .parentsUntil('locatin') goes back up until that location  BUT NOT including 

.children()     gets children of where you are 


.check()        Only on checkbox and radio 

.should('be.checked')     have.length 

.invoke()       will grab but not make any command 



______________________________________________________________________
iFrame 

cy.get('#form_frame')           Get some unique  iframe locator
its('0.contentDocument.body')   always do this with iFrames
.find('#first_name')            use find instead of get

______________________________________________________________________
Multiple tabs

Cypress cannot natively open or test new browser tabs or windows.


cy.get('#apple').invoke('removeAttr', 'target').click()

what we did here was remove target to open on same page 

______________________________________________________________________
Alerts
3 types: Warning Alert, Confirmation alert, Prompt Alert

Event listners wait for alert then -
WARNING ALERT
  cy.on('window:alert', (str) =>{
            console.log(str)
        })


CONFORMATION ALERT
    cy.on('window:confirm', (str) => })


PROMPT ALERT

    it('Handle prompt', () =>{

        cy.window().then((win) =>{
            cy.stub(win, 'prompt').returns(null)
        })
        cy.get('#prompt_alert').click()
        
    })


 cy.stub(win, 'prompt').callsFake((message) => {
expect(message).to.equal('What would you like to say to TechGlobal?')

so when we return a message it is the same as confirm when we say 
return flase or null it means cancel 

